HOMEWORK #8

In [ ]:
!python --version
https://github.com/cis024c/fall2017classwork/tree/master/week8
Exercise 1 - Testing your knowledge of External Libraries
Answer the below questions
Name two benefits of using external libraries =  generally more correct and complete implementations;
re-use of existing solutions shorter development time;
guided toward consistent structures and away from ad-hoc messes;
better and easier APIs.	
What are the different ways of including an external library in a Python program?	
Modules
Packages
-A module is simply a file that ends in .py. In order for python, it must exist on the search path (as defined in sys.path). The search path usually consists of the same directory of the .py that is being run, as well as the python system directories.

-Packages provide a more structured way to contain larger python programs. They are simply a directory which contains an __init__.py as well as other python files.

As long as the package directory is on sys.path, then it can be used exactly the same as above




Exercise 2 - Using the math library
Import the math library in your program and do the following
Request the user to enter a number between 1 and 10
Compute the log (math.log) of the number
Compute teh factorial (math.factorial) of the number
Compute the square root (math.sqrt) of the number
Compute the sine (math.sin) of the number
Refer to https://docs.python.org/2/library/math.html for more information on the math library
In [ ]:

import math

x = math.degrees(math.pi/ 2.0)
print(x)
x = math.radians(30)
print(x)
x = math.sin( math.pi/6)
print(x)
x = math.sqrt(25)
print(x)
x = math.cell(2.6)
print(x)


### END CODE
Exercise 3 - Random numbers
Generate a list of 10 random numbers between 1 and 100. Use random.sample function. Write a program to then sort the list of numbers in ascending order.
In [ ]: import random

>>> import random
from random import 
 
items = [7, 14, 21, 28, 35, 42, 49, 63, 77, 98]
 
x = sample(items,  7)   # Pick a random item from the list
print x[7]
 
y = sample(items, 28)    # Pick 28 random items from the list
print y


### END CODE
Exercise 4 - Creating your own library
Create a python module helperfunctions.py with the following functions.
add - returns the sum of two numbers
diff - returns the difference between two numbers
product - returns the product of two numbers
greatest - returns the greatest of two numbers.
Import this module in your python program and use the functions your created on any two numbers and print the result.
Note: Upload the helperfunctions.py module to your github folder along with the notebook file. You can also upload helperfunctions.py to Canvas if you are having trouble copying it to Github
In [ ]:

int main()
{
    // Print 100 random numbers
    for (int count=1; count <= 100; ++count)
    {
        std::cout << PRNG() << "\t";
 
        // If we've printed 5 numbers, start a new row
        if (count % 5 == 0)
            std::cout << "\n";
	}
 
    return 0;
}

   

Exercise 5 - Compressing a file using the zlib library
Download the story Alice in Wonderland from the link below  and save it as the file alice.txt
Write a python program to open this file in your program. Use the zlib library to compress the contents of the file and write it back to another file call alice_compressed.txt
Now, open the file alice_compressed.txt, decompress using the zlib library and display the results on the screen.
Refer to Week 8 lecture slides and classwork for information on how to use zlib.
In [ ]:
 
import zlib
import string, StringIO

class ZipInputStream:

    def __init__(self, file):
        self.file = file
        self.__rewind()

    def __rewind(self):
        self.zip = zlib.decompressobj()
        self.pos = 0 # position in zipped stream
        self.offset = 0 # position in unzipped stream
        self.data = ""

    def __fill(self, bytes):
        if self.zip:
            # read until we have enough bytes in the buffer
            while not bytes or len(self.data) < bytes:
                self.file.seek(self.pos)
                data = self.file.read(16384)
                if not data:
                    self.data = self.data + self.zip.flush()
                    self.zip = None # no more data
                    break
                self.pos = self.pos + len(data)
                self.data = self.data + self.zip.decompress(data)

    def seek(self, offset, whence=0):
        if whence == 0:
            position = offset
        elif whence == 1:
            position = self.offset + offset
        else:
            raise IOError, "Illegal argument"
        if position < self.offset:
            raise IOError, "Cannot seek backwards"

        # skip forward, in 16k blocks
        while position > self.offset:
            if not self.read(min(position - self.offset, 16384)):
                break

    def tell(self):
        return self.offset

    def read(self, bytes = 0):
        self.__fill(bytes)
        if bytes:
            data = self.data[:bytes]
            self.data = self.data[bytes:]
        else:
            data = self.data
            self.data = ""
        self.offset = self.offset + len(data)
        return data

    def readline(self):
        # make sure we have an entire line
        while self.zip and "\n" not in self.data:
            self.__fill(len(self.data) + 512)
        i = string.find(self.data, "\n") + 1
        if i <= 0:
            return self.read()
        return self.read(i)

    def readlines(self):
        lines = []
        while 1:
            s = self.readline()
            if not s:
                break
            lines.append(s)
        return lines

# try it out

data = open("samples/sample.txt").read() 
data = zlib.compress(data)

file = ZipInputStream(StringIO.StringIO(data))
for line in file.readlines():
    print line[:-1]

